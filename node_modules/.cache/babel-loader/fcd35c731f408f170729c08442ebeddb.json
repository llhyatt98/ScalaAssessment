{"ast":null,"code":"import { rest } from 'msw';\n// import { HikersDto } from \"../scala-api\";\nimport { hikerData } from \"./data/hikerData\";\nimport { bridgeData } from \"./data/bridgeData\";\nconst mockAuthToken = Math.random().toString(36).slice(2);\nexport const handlers = [// TODO: Add interfaces to requests\nrest.get(\"/api/hikers\", (req, res, context) => {\n  // TODO: If no hikers in sessionStorage, return default data\n  return res(context.status(200), context.json({\n    hikerData\n  }));\n}), rest.get(\"/api/bridges\", (req, res, context) => {\n  // TODO: If no bridges in sessionStorage, return default data\n  return res(context.status(200), context.json({\n    bridgeData\n  }));\n})];","map":{"version":3,"sources":["/Users/llhyatt98/Desktop/Work/ScalaChallenge/src/mocks/handlers.ts"],"names":["rest","hikerData","bridgeData","mockAuthToken","Math","random","toString","slice","handlers","get","req","res","context","status","json"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,KAAnB;AAEA;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AAEA,MAAMC,aAAa,GAAGC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC,CAAtB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CACpB;AACAR,IAAI,CAACS,GAAL,CAAmC,aAAnC,EAAmD,CAACC,GAAD,EAAMC,GAAN,EAAWC,OAAX,KAAuB;AACtE;AACA,SAAOD,GAAG,CAACC,OAAO,CAACC,MAAR,CAAe,GAAf,CAAD,EAAsBD,OAAO,CAACE,IAAR,CAAa;AAAEb,IAAAA;AAAF,GAAb,CAAtB,CAAV;AACH,CAHD,CAFoB,EAOpBD,IAAI,CAACS,GAAL,CAAmC,cAAnC,EAAoD,CAACC,GAAD,EAAMC,GAAN,EAAWC,OAAX,KAAuB;AACvE;AACA,SAAOD,GAAG,CAACC,OAAO,CAACC,MAAR,CAAe,GAAf,CAAD,EAAsBD,OAAO,CAACE,IAAR,CAAa;AAAEZ,IAAAA;AAAF,GAAb,CAAtB,CAAV;AACH,CAHD,CAPoB,CAAjB","sourcesContent":["import {rest} from 'msw'\nimport {ApiError} from \"../scala-api\";\n// import { HikersDto } from \"../scala-api\";\nimport {hikerData} from \"./data/hikerData\";\nimport {bridgeData} from \"./data/bridgeData\";\n\nconst mockAuthToken = Math.random().toString(36).slice(2);\n\nexport const handlers = [\n    // TODO: Add interfaces to requests\n    rest.get<any, any, any | ApiError>(\"/api/hikers\", ((req, res, context) => {\n        // TODO: If no hikers in sessionStorage, return default data\n        return res(context.status(200), context.json({ hikerData }))\n    })),\n\n    rest.get<any, any, any | ApiError>(\"/api/bridges\", ((req, res, context) => {\n        // TODO: If no bridges in sessionStorage, return default data\n        return res(context.status(200), context.json({ bridgeData }))\n    })),\n\n]\n"]},"metadata":{},"sourceType":"module"}