{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.format = void 0;\nvar POSITIONALS_EXP = /(%?)(%([sdjo]))/g;\n\nfunction serializePositional(positional, flag) {\n  switch (flag) {\n    // Strings.\n    case 's':\n      return positional;\n    // Digits.\n\n    case 'd':\n    case 'i':\n      return Number(positional);\n    // JSON.\n\n    case 'j':\n      return JSON.stringify(positional);\n    // Objects.\n\n    case 'o':\n      {\n        // Preserve stings to prevent extra quotes around them.\n        if (typeof positional === 'string') {\n          return positional;\n        }\n\n        var json = JSON.stringify(positional); // If the positional isn't serializable, return it as-is.\n\n        if (json === '{}' || json === '[]' || /^\\[object .+?\\]$/.test(json)) {\n          return positional;\n        }\n\n        return json;\n      }\n  }\n}\n\nfunction format(message) {\n  var positionals = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    positionals[_i - 1] = arguments[_i];\n  }\n\n  if (positionals.length === 0) {\n    return message;\n  }\n\n  var positionalIndex = 0;\n  var formattedMessage = message.replace(POSITIONALS_EXP, function (match, isEscaped, _, flag) {\n    var positional = positionals[positionalIndex];\n    var value = serializePositional(positional, flag);\n\n    if (!isEscaped) {\n      positionalIndex++;\n      return value;\n    }\n\n    return match;\n  }); // Append unresolved positionals to string as-is.\n\n  if (positionalIndex < positionals.length) {\n    formattedMessage += \" \" + positionals.slice(positionalIndex).join(' ');\n  }\n\n  formattedMessage = formattedMessage.replace(/%{2,2}/g, '%');\n  return formattedMessage;\n}\n\nexports.format = format;","map":null,"metadata":{},"sourceType":"script"}