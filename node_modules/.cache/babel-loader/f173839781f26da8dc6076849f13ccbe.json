{"ast":null,"code":"import { createStore } from \"redux\";\nconst initialState = {\n  hikers: [],\n  bridges: []\n};\n\nfunction rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD_HIKERS\":\n      return { ...state,\n        hikers: action.payload\n      };\n\n    case \"ADD_BRIDGES\":\n      return { ...state,\n        bridges: action.payload\n      };\n\n    case \"UPDATE_BRIDGE\":\n      const currentBridges = state.bridges.bridgeData;\n      const bridgeIndex = currentBridges.findIndex(bridge => bridge.id === action.payload.id);\n\n      if (bridgeIndex) {\n        const selectedBridge = currentBridges[bridgeIndex];\n        selectedBridge.hikers = action.payload.updatedBridgeState;\n        currentBridges[bridgeIndex] = selectedBridge;\n        console.log(currentBridges);\n        return { ...state,\n          bridges: {\n            bridgeData: currentBridges\n          }\n        };\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(rootReducer);","map":{"version":3,"sources":["/Users/llhyatt98/Desktop/Work/ScalaChallenge/src/store.ts"],"names":["createStore","initialState","hikers","bridges","rootReducer","state","action","type","payload","currentBridges","bridgeData","bridgeIndex","findIndex","bridge","id","selectedBridge","updatedBridgeState","console","log","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAOA,MAAMC,YAAsB,GAAG;AAC7BC,EAAAA,MAAM,EAAE,EADqB;AAE7BC,EAAAA,OAAO,EAAE;AAFoB,CAA/B;;AAKA,SAASC,WAAT,GAAkE;AAAA,MAA7CC,KAA6C,uEAA3BJ,YAA2B;AAAA,MAAbK,MAAa;;AAChE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAK,YAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELH,QAAAA,MAAM,EAAEI,MAAM,CAACE;AAFV,OAAP;;AAKF,SAAK,aAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELF,QAAAA,OAAO,EAAEG,MAAM,CAACE;AAFX,OAAP;;AAKF,SAAK,eAAL;AACE,YAAMC,cAAc,GAAGJ,KAAK,CAACF,OAAN,CAAcO,UAArC;AACA,YAAMC,WAAW,GAAGF,cAAc,CAACG,SAAf,CAA0BC,MAAD,IAAiBA,MAAM,CAACC,EAAP,KAAcR,MAAM,CAACE,OAAP,CAAeM,EAAvE,CAApB;;AACA,UAAGH,WAAH,EAAe;AACb,cAAMI,cAAc,GAAGN,cAAc,CAACE,WAAD,CAArC;AACAI,QAAAA,cAAc,CAACb,MAAf,GAAwBI,MAAM,CAACE,OAAP,CAAeQ,kBAAvC;AACAP,QAAAA,cAAc,CAACE,WAAD,CAAd,GAA8BI,cAA9B;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYT,cAAZ;AACA,eAAO,EACH,GAAGJ,KADA;AAEHF,UAAAA,OAAO,EAAE;AAAEO,YAAAA,UAAU,EAAED;AAAd;AAFN,SAAP;AAID;;AAED,aAAOJ,KAAP;;AAEF;AACE,aAAOA,KAAP;AA/BJ;AAiCD;;AAED,OAAO,MAAMc,KAAK,GAAGnB,WAAW,CAACI,WAAD,CAAzB","sourcesContent":["import { createStore } from \"redux\";\n\ninterface AppState {\n  hikers: any;\n  bridges: any;\n}\n\nconst initialState: AppState = {\n  hikers: [],\n  bridges: [],\n};\n\nfunction rootReducer(state: AppState = initialState, action: any) {\n  switch (action.type) {\n\n    case \"ADD_HIKERS\":\n      return {\n        ...state,\n        hikers: action.payload,\n      };\n\n    case \"ADD_BRIDGES\":\n      return {\n        ...state,\n        bridges: action.payload,\n      };\n\n    case \"UPDATE_BRIDGE\":\n      const currentBridges = state.bridges.bridgeData;\n      const bridgeIndex = currentBridges.findIndex((bridge: any) => bridge.id === action.payload.id);\n      if(bridgeIndex){\n        const selectedBridge = currentBridges[bridgeIndex];\n        selectedBridge.hikers = action.payload.updatedBridgeState;\n        currentBridges[bridgeIndex] = selectedBridge;\n        console.log(currentBridges);\n        return {\n            ...state,\n            bridges: { bridgeData: currentBridges }\n        }\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(rootReducer);"]},"metadata":{},"sourceType":"module"}