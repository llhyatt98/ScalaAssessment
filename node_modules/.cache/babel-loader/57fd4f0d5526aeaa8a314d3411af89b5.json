{"ast":null,"code":"import { rest } from 'msw';\n// import { HikersDto } from \"../scala-api\";\nimport { hikerData } from \"./data/hikerData\";\nimport { bridgeData } from \"./data/bridgeData\";\nconst mockAuthToken = Math.random().toString(36).slice(2);\nexport const handlers = [// TODO: Add interfaces to requests\nrest.get(\"/api/hikers\", (req, res, context) => {\n  // TODO: If no hikers in sessionStorage, return default data\n  return res(context.status(200), context.json({\n    hikerData\n  }));\n}), rest.get(\"/api/bridges\", (req, res, context) => {\n  // TODO: If no bridges in sessionStorage, return default data\n  return res(context.status(200), context.json({\n    bridgeData\n  }));\n}), rest.post(\"/api/hikers\", (req, res, context) => {\n  // TODO: Store hikers in sessionStorage\n  // TODO: If no hikers in sessionStorage, return default data\n  // TODO: Change username, password out\n  const {\n    username,\n    password\n  } = req.body;\n\n  if (!!username && !!password) {\n    sessionStorage.setItem(\"username\", username);\n    sessionStorage.setItem(\"authToken\", mockAuthToken);\n    return res( // Respond with a 200 status code\n    context.status(200), context.json({\n      username: username,\n      authToken: mockAuthToken\n    }));\n  } else {\n    return res(context.status(400));\n  }\n}), rest.post(\"/api/bridge\", (req, res, context) => {\n  // TODO: Store bridges in sessionStorage\n  // TODO: If no bridges in sessionStorage, return default data\n  // TODO: Change username, password out\n  const {\n    username,\n    password\n  } = req.body;\n\n  if (!!username && !!password) {\n    sessionStorage.setItem(\"username\", username);\n    sessionStorage.setItem(\"authToken\", mockAuthToken);\n    return res( // Respond with a 200 status code\n    context.status(200), context.json({\n      username: username,\n      authToken: mockAuthToken\n    }));\n  } else {\n    return res(context.status(400));\n  }\n}), rest.post(\"/api/crossing\", (req, res, context) => {\n  // TODO: JSON payload is hikerID's and bridgeID's for each crossing\n  const {\n    username,\n    password\n  } = req.body;\n\n  if (!!username && !!password) {\n    sessionStorage.setItem(\"username\", username);\n    sessionStorage.setItem(\"authToken\", mockAuthToken);\n    return res( // Respond with a 200 status code\n    context.status(200), context.json({\n      username: username,\n      authToken: mockAuthToken\n    }));\n  } else {\n    return res(context.status(400));\n  }\n}) // rest.get<any, any, AppointmentsDto | ApiError>(\"/api/appointments\", ((req, res, context) => {\n//     if (!req.headers.get('Authorization')?.includes(mockAuthToken)) {\n//         return res(context.status(403), context.json({\n//             error: \"Not Authorized\"\n//         }))\n//     }\n//     return res(context.status(200), context.json({\n//         appointmentSlots: mockAppointmentSlots,\n//     }))\n// })),\n// rest.get<any, any, ClinicsDto | ApiError>('/api/clinics', ((req, res, context) => {\n//     if (!req.headers.get('Authorization')?.includes(mockAuthToken)) {\n//         return res(context.status(403), context.json({\n//             error: \"Not Authorized\"\n//         }))\n//     }\n//     return res(context.status(200), context.json({\n//         clinics: mockClinics\n//     }))\n// })),\n// rest.get<any, { clinicId: string; }, Clinic | ApiError>('/api/clinics/:clinicId', ((req, res, context) => {\n//     if (!req.headers.get('Authorization')?.includes(mockAuthToken)) {\n//         return res(context.status(403), context.json({\n//             error: \"Not Authorized\"\n//         }))\n//     }\n//     const { clinicId } = req.params\n//     const clinic = mockClinics.find(c => c.id === parseInt(clinicId, 10));\n//     if (clinic) {\n//         return res(context.status(200), context.json(clinic))\n//     } else {\n//         return res(context.status(404), context.json({\n//             \"error\": `No clinic found with id='${clinicId}'`\n//         }));\n//     }\n// })),\n// // consumes and produces \"application/json\" only\n// rest.post<Login, any, LoginResponse>('/api/login', (req, res, ctx) => {\n//     const { username, password } = req.body\n//     if (!!username && !!password) {\n//         sessionStorage.setItem(\"username\", username)\n//         sessionStorage.setItem(\"authToken\", mockAuthToken)\n//         return res(\n//             // Respond with a 200 status code\n//             ctx.status(200),\n//             ctx.json({\n//                 username: username,\n//                 authToken: mockAuthToken\n//             })\n//         )\n//     } else {\n//         return res(\n//             ctx.status(400),\n//         )\n//     }\n// }),\n];","map":{"version":3,"sources":["/Users/llhyatt98/Desktop/Work/ScalaChallenge/src/mocks/handlers.ts"],"names":["rest","hikerData","bridgeData","mockAuthToken","Math","random","toString","slice","handlers","get","req","res","context","status","json","post","username","password","body","sessionStorage","setItem","authToken"],"mappings":"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","sourcesContent":["import {rest} from 'msw'\nimport {ApiError, Clinic, ClinicsDto, Login, LoginResponse} from \"../scala-api\";\n// import { HikersDto } from \"../scala-api\";\nimport {hikerData} from \"./data/hikerData\";\nimport {bridgeData} from \"./data/bridgeData\";\n\nconst mockAuthToken = Math.random().toString(36).slice(2);\n\nexport const handlers = [\n    // TODO: Add interfaces to requests\n    rest.get<any, any, any | ApiError>(\"/api/hikers\", ((req, res, context) => {\n        // TODO: If no hikers in sessionStorage, return default data\n        return res(context.status(200), context.json({ hikerData }))\n    })),\n\n    rest.get<any, any, any | ApiError>(\"/api/bridges\", ((req, res, context) => {\n        // TODO: If no bridges in sessionStorage, return default data\n        return res(context.status(200), context.json({ bridgeData }))\n    })),\n\n    rest.post<any, any, any | ApiError>(\"/api/hikers\", ((req, res, context) => {\n        // TODO: Store hikers in sessionStorage\n        // TODO: If no hikers in sessionStorage, return default data\n        // TODO: Change username, password out\n        const { username, password } = req.body\n        if (!!username && !!password) {\n            sessionStorage.setItem(\"username\", username)\n            sessionStorage.setItem(\"authToken\", mockAuthToken)\n            return res(\n                // Respond with a 200 status code\n                context.status(200),\n                context.json({\n                    username: username,\n                    authToken: mockAuthToken\n                })\n            )\n        } else {\n            return res(\n                context.status(400),\n            )\n        }\n    })),\n\n    rest.post<any, any, any | ApiError>(\"/api/bridge\", ((req, res, context) => {\n        // TODO: Store bridges in sessionStorage\n        // TODO: If no bridges in sessionStorage, return default data\n        // TODO: Change username, password out\n        const { username, password } = req.body\n        if (!!username && !!password) {\n            sessionStorage.setItem(\"username\", username)\n            sessionStorage.setItem(\"authToken\", mockAuthToken)\n            return res(\n                // Respond with a 200 status code\n                context.status(200),\n                context.json({\n                    username: username,\n                    authToken: mockAuthToken\n                })\n            )\n        } else {\n            return res(\n                context.status(400),\n            )\n        }\n    })),\n\n    rest.post<any, any, any | ApiError>(\"/api/crossing\", ((req, res, context) => {\n        // TODO: JSON payload is hikerID's and bridgeID's for each crossing\n        const { username, password } = req.body\n        if (!!username && !!password) {\n            sessionStorage.setItem(\"username\", username)\n            sessionStorage.setItem(\"authToken\", mockAuthToken)\n            return res(\n                // Respond with a 200 status code\n                context.status(200),\n                context.json({\n                    username: username,\n                    authToken: mockAuthToken\n                })\n            )\n        } else {\n            return res(\n                context.status(400),\n            )\n        }\n    })),\n\n    // rest.get<any, any, AppointmentsDto | ApiError>(\"/api/appointments\", ((req, res, context) => {\n    //     if (!req.headers.get('Authorization')?.includes(mockAuthToken)) {\n    //         return res(context.status(403), context.json({\n    //             error: \"Not Authorized\"\n    //         }))\n    //     }\n\n    //     return res(context.status(200), context.json({\n    //         appointmentSlots: mockAppointmentSlots,\n    //     }))\n    // })),\n\n    // rest.get<any, any, ClinicsDto | ApiError>('/api/clinics', ((req, res, context) => {\n    //     if (!req.headers.get('Authorization')?.includes(mockAuthToken)) {\n    //         return res(context.status(403), context.json({\n    //             error: \"Not Authorized\"\n    //         }))\n    //     }\n\n    //     return res(context.status(200), context.json({\n    //         clinics: mockClinics\n    //     }))\n    // })),\n\n    // rest.get<any, { clinicId: string; }, Clinic | ApiError>('/api/clinics/:clinicId', ((req, res, context) => {\n    //     if (!req.headers.get('Authorization')?.includes(mockAuthToken)) {\n    //         return res(context.status(403), context.json({\n    //             error: \"Not Authorized\"\n    //         }))\n    //     }\n\n    //     const { clinicId } = req.params\n\n    //     const clinic = mockClinics.find(c => c.id === parseInt(clinicId, 10));\n    //     if (clinic) {\n    //         return res(context.status(200), context.json(clinic))\n    //     } else {\n    //         return res(context.status(404), context.json({\n    //             \"error\": `No clinic found with id='${clinicId}'`\n    //         }));\n    //     }\n    // })),\n\n    // // consumes and produces \"application/json\" only\n    // rest.post<Login, any, LoginResponse>('/api/login', (req, res, ctx) => {\n    //     const { username, password } = req.body\n    //     if (!!username && !!password) {\n    //         sessionStorage.setItem(\"username\", username)\n    //         sessionStorage.setItem(\"authToken\", mockAuthToken)\n    //         return res(\n    //             // Respond with a 200 status code\n    //             ctx.status(200),\n    //             ctx.json({\n    //                 username: username,\n    //                 authToken: mockAuthToken\n    //             })\n    //         )\n    //     } else {\n    //         return res(\n    //             ctx.status(400),\n    //         )\n    //     }\n    // }),\n]\n"]},"metadata":{},"sourceType":"module"}