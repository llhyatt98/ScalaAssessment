{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.invariant = exports.InvariantError = void 0;\n\nvar format_1 = require(\"./format\");\n\nvar STACK_FRAMES_TO_IGNORE = 2;\n\nvar InvariantError =\n/** @class */\nfunction (_super) {\n  __extends(InvariantError, _super);\n\n  function InvariantError(message) {\n    var positionals = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      positionals[_i - 1] = arguments[_i];\n    }\n\n    var _this = _super.call(this, message) || this;\n\n    _this.name = 'Invariant Violation';\n    _this.message = format_1.format.apply(void 0, __spreadArray([message], positionals));\n\n    if (_this.stack) {\n      var nextStack = _this.stack.split('\\n');\n\n      nextStack.splice(1, STACK_FRAMES_TO_IGNORE);\n      _this.stack = nextStack.join('\\n');\n    }\n\n    return _this;\n  }\n\n  return InvariantError;\n}(Error);\n\nexports.InvariantError = InvariantError;\n\nfunction invariant(predicate, message) {\n  var positionals = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    positionals[_i - 2] = arguments[_i];\n  }\n\n  if (!predicate) {\n    throw new (InvariantError.bind.apply(InvariantError, __spreadArray([void 0, message], positionals)))();\n  }\n}\n\nexports.invariant = invariant;","map":null,"metadata":{},"sourceType":"script"}