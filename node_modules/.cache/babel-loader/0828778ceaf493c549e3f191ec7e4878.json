{"ast":null,"code":"import { rest } from 'msw';\nimport { mockClinics } from \"./data/clinics\";\nimport { mockAppointmentSlots } from \"./data/appointmentSlots\";\nconst mockAuthToken = Math.random().toString(36).slice(2);\nexport const handlers = [rest.get(\"/api/appointments\", (req, res, context) => {\n  var _req$headers$get;\n\n  if (!((_req$headers$get = req.headers.get('Authorization')) !== null && _req$headers$get !== void 0 && _req$headers$get.includes(mockAuthToken))) {\n    return res(context.status(403), context.json({\n      error: \"Not Authorized\"\n    }));\n  }\n\n  return res(context.status(200), context.json({\n    appointmentSlots: mockAppointmentSlots\n  }));\n}), rest.get('/api/clinics', (req, res, context) => {\n  var _req$headers$get2;\n\n  if (!((_req$headers$get2 = req.headers.get('Authorization')) !== null && _req$headers$get2 !== void 0 && _req$headers$get2.includes(mockAuthToken))) {\n    return res(context.status(403), context.json({\n      error: \"Not Authorized\"\n    }));\n  }\n\n  return res(context.status(200), context.json({\n    clinics: mockClinics\n  }));\n}), rest.get('/api/clinics/:clinicId', (req, res, context) => {\n  var _req$headers$get3;\n\n  if (!((_req$headers$get3 = req.headers.get('Authorization')) !== null && _req$headers$get3 !== void 0 && _req$headers$get3.includes(mockAuthToken))) {\n    return res(context.status(403), context.json({\n      error: \"Not Authorized\"\n    }));\n  }\n\n  const {\n    clinicId\n  } = req.params;\n  const clinic = mockClinics.find(c => c.id === parseInt(clinicId, 10));\n\n  if (clinic) {\n    return res(context.status(200), context.json(clinic));\n  } else {\n    return res(context.status(404), context.json({\n      \"error\": `No clinic found with id='${clinicId}'`\n    }));\n  }\n}), // consumes and produces \"application/json\" only\nrest.post('/api/login', (req, res, ctx) => {\n  const {\n    username,\n    password\n  } = req.body;\n\n  if (!!username && !!password) {\n    sessionStorage.setItem(\"username\", username);\n    sessionStorage.setItem(\"authToken\", mockAuthToken);\n    return res( // Respond with a 200 status code\n    ctx.status(200), ctx.json({\n      username: username,\n      authToken: mockAuthToken\n    }));\n  } else {\n    return res(ctx.status(400));\n  }\n})];","map":{"version":3,"sources":["/Users/llhyatt98/Desktop/Work/ScalaChallenge/src/mocks/handlers.ts"],"names":["rest","mockClinics","mockAppointmentSlots","mockAuthToken","Math","random","toString","slice","handlers","get","req","res","context","headers","includes","status","json","error","appointmentSlots","clinics","clinicId","params","clinic","find","c","id","parseInt","post","ctx","username","password","body","sessionStorage","setItem","authToken"],"mappings":"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","sourcesContent":["import {rest} from 'msw'\nimport {ApiError, AppointmentsDto, Clinic, ClinicsDto, Login, LoginResponse} from \"../scala-api\";\nimport {mockClinics} from \"./data/clinics\";\nimport {mockAppointmentSlots} from \"./data/appointmentSlots\";\n\nconst mockAuthToken = Math.random().toString(36).slice(2);\n\nexport const handlers = [\n    rest.get<any, any, AppointmentsDto | ApiError>(\"/api/appointments\", ((req, res, context) => {\n        if (!req.headers.get('Authorization')?.includes(mockAuthToken)) {\n            return res(context.status(403), context.json({\n                error: \"Not Authorized\"\n            }))\n        }\n\n        return res(context.status(200), context.json({\n            appointmentSlots: mockAppointmentSlots,\n        }))\n    })),\n\n    rest.get<any, any, ClinicsDto | ApiError>('/api/clinics', ((req, res, context) => {\n        if (!req.headers.get('Authorization')?.includes(mockAuthToken)) {\n            return res(context.status(403), context.json({\n                error: \"Not Authorized\"\n            }))\n        }\n\n        return res(context.status(200), context.json({\n            clinics: mockClinics\n        }))\n    })),\n\n    rest.get<any, { clinicId: string; }, Clinic | ApiError>('/api/clinics/:clinicId', ((req, res, context) => {\n        if (!req.headers.get('Authorization')?.includes(mockAuthToken)) {\n            return res(context.status(403), context.json({\n                error: \"Not Authorized\"\n            }))\n        }\n\n        const { clinicId } = req.params\n\n        const clinic = mockClinics.find(c => c.id === parseInt(clinicId, 10));\n        if (clinic) {\n            return res(context.status(200), context.json(clinic))\n        } else {\n            return res(context.status(404), context.json({\n                \"error\": `No clinic found with id='${clinicId}'`\n            }));\n        }\n    })),\n\n    // consumes and produces \"application/json\" only\n    rest.post<Login, any, LoginResponse>('/api/login', (req, res, ctx) => {\n        const { username, password } = req.body\n        if (!!username && !!password) {\n            sessionStorage.setItem(\"username\", username)\n            sessionStorage.setItem(\"authToken\", mockAuthToken)\n            return res(\n                // Respond with a 200 status code\n                ctx.status(200),\n                ctx.json({\n                    username: username,\n                    authToken: mockAuthToken\n                })\n            )\n        } else {\n            return res(\n                ctx.status(400),\n            )\n        }\n    }),\n]\n"]},"metadata":{},"sourceType":"module"}