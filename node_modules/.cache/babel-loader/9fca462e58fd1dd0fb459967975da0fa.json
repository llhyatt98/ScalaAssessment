{"ast":null,"code":"import { createStore } from \"redux\";\nconst initialState = {\n  hikers: [],\n  bridges: []\n};\n\nfunction rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD_HIKERS\":\n      console.log(\"Adding hikers:\", action.payload);\n      return { ...state,\n        hikers: action.payload\n      };\n\n    case \"ADD_BRIDGES\":\n      return { ...state,\n        bridges: action.payload\n      };\n\n    case \"UPDATE_BRIDGE\":\n      const currentBridges = state.bridges.bridgeData;\n      console.log(\"Current bridges:\", currentBridges);\n      console.log(\"Updated bridge:\", action.payload);\n      const selectedBridge = currentBridges.find(bridge => bridge.id === action.payload.id);\n\n      if (selectedBridge) {\n        selectedBridge.hikers = action.payload.updatedBridgeState;\n      }\n\n    //   return {\n    //     ...state,\n    //     bridges: action.payload,\n    //   };\n\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(rootReducer);","map":{"version":3,"sources":["/Users/llhyatt98/Desktop/Work/ScalaChallenge/src/store.ts"],"names":["createStore","initialState","hikers","bridges","rootReducer","state","action","type","console","log","payload","currentBridges","bridgeData","selectedBridge","find","bridge","id","updatedBridgeState","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAOA,MAAMC,YAAsB,GAAG;AAC7BC,EAAAA,MAAM,EAAE,EADqB;AAE7BC,EAAAA,OAAO,EAAE;AAFoB,CAA/B;;AAKA,SAASC,WAAT,GAAkE;AAAA,MAA7CC,KAA6C,uEAA3BJ,YAA2B;AAAA,MAAbK,MAAa;;AAChE,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAK,YAAL;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,MAAM,CAACI,OAArC;AACA,aAAO,EACL,GAAGL,KADE;AAELH,QAAAA,MAAM,EAAEI,MAAM,CAACI;AAFV,OAAP;;AAKF,SAAK,aAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELF,QAAAA,OAAO,EAAEG,MAAM,CAACI;AAFX,OAAP;;AAKF,SAAK,eAAL;AACE,YAAMC,cAAc,GAAGN,KAAK,CAACF,OAAN,CAAcS,UAArC;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCE,cAAhC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,MAAM,CAACI,OAAtC;AACA,YAAMG,cAAc,GAAGF,cAAc,CAACG,IAAf,CAAqBC,MAAD,IAAiBA,MAAM,CAACC,EAAP,KAAcV,MAAM,CAACI,OAAP,CAAeM,EAAlE,CAAvB;;AACA,UAAGH,cAAH,EAAkB;AAChBA,QAAAA,cAAc,CAACX,MAAf,GAAwBI,MAAM,CAACI,OAAP,CAAeO,kBAAvC;AACD;;AACH;AACA;AACA;AACA;;AAEA;AACE,aAAOZ,KAAP;AA7BJ;AA+BD;;AAED,OAAO,MAAMa,KAAK,GAAGlB,WAAW,CAACI,WAAD,CAAzB","sourcesContent":["import { createStore } from \"redux\";\n\ninterface AppState {\n  hikers: any;\n  bridges: any;\n}\n\nconst initialState: AppState = {\n  hikers: [],\n  bridges: [],\n};\n\nfunction rootReducer(state: AppState = initialState, action: any) {\n  switch (action.type) {\n\n    case \"ADD_HIKERS\":\n      console.log(\"Adding hikers:\", action.payload);\n      return {\n        ...state,\n        hikers: action.payload,\n      };\n\n    case \"ADD_BRIDGES\":\n      return {\n        ...state,\n        bridges: action.payload,\n      };\n\n    case \"UPDATE_BRIDGE\":\n      const currentBridges = state.bridges.bridgeData;\n      console.log(\"Current bridges:\", currentBridges);\n      console.log(\"Updated bridge:\", action.payload);\n      const selectedBridge = currentBridges.find((bridge: any) => bridge.id === action.payload.id);\n      if(selectedBridge){\n        selectedBridge.hikers = action.payload.updatedBridgeState;\n      }\n    //   return {\n    //     ...state,\n    //     bridges: action.payload,\n    //   };\n\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(rootReducer);"]},"metadata":{},"sourceType":"module"}